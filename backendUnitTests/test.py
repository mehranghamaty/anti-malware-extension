
import requests
import unittest
import os

BASE_URL = "http://127.0.0.1"
PORT = "8000"
CHUNK_SIZE = 4194304

target_url = f"{BASE_URL}:{PORT}"
test_file = "testFiles/GeForceNOW-release.exe"


"""
    End points to test for

    0. ensure keep alive works
    1. ensure scanning works
    2. ensure dashboard works
"""
class TestResponses(unittest.TestCase):
    """
        Basic keep alive
    """
    def testAlive(self):
        response = requests.get(target_url)
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.text, 'works!')

    
    """
        Make sure we are getting a reasonable result from the scanner
    """
    def testScanner(self):
        request_url = f"{target_url}/scan"
        num_bytes = os.stat(test_file).st_size
        with open(test_file, 'rb') as file:
            ind = 0
            while chunk := file.read(CHUNK_SIZE):
                new_ind = ind + CHUNK_SIZE
                lastMess = num_bytes > new_ind
                body = {
                    'name': test_file,
                    'data': [b for b in chunk],
                    'start': ind,
                    'end': num_bytes if lastMess else new_ind,
                    'lastMessage': lastMess,
                }
                response = requests.post(request_url, json = body)
                ind = new_ind

                #print(f"sending {new_ind} out of {num_bytes}, {new_ind/num_bytes}")

                self.assertEqual(response.status_code, 200)
                self.assertEqual(response.headers['content-type'], 'application/json')
                if not lastMess:
                    self.assertEqual(response.json(), {"status":"parsing"})
                else:
                    scanner_res =  { "status" : "possibly_malicious", "method" : "inhouse"}
                    self.assertEqual(response.json(), 
                                    {
                                        "scanner_results" : scanner_res,
                                        "status": "complete"
                                    })


    

if __name__ == "__main__":
    unittest.main()