
import flask_unittest

from scanners.modelWrapper import ModelWrapper
from utility.ScanMetaData import ScanMetaData
from app.appForTest import generateAppForTest

class TestModelWrapper(flask_unittest.AppClientTestCase):
    def create_app(self):
        self._scanner= ModelWrapper()
        return generateAppForTest(self._scanner)

    def testScanKnownBad(self, *_):
        test_file_path = "testFiles/GeForceNOW-release.exe"
        metadata = ScanMetaData(test_file_path)
        with open(test_file_path, 'rb') as file:
            bytes = file.read()
            res = self._scanner.scan(bytes, metadata)
            self.assertEqual(res, {'results': 'possibly_malicious', 'method': 'RF', 'reason' : 'Trojan'})
    
    def testUnsupported(self, *_):
        test_file_path = "testFiles/save.txt"
        metadata = ScanMetaData(test_file_path)
        with open(test_file_path, 'rb') as file:
            bytes = file.read()
            res = self._scanner.scan(bytes, metadata)
            self.assertEqual(res, {'results': 'no_scan', 'method': 'RF'})

    def testDashboard(self, _, client):
        res = client.get('/dashboard')
        self.assertEqual(res.status, '200 OK')
        self.assertIn(b'<h1>ModelWrapper Counts</h1>', res.data)

if __name__ == "__main__":
    TestModelWrapper.main()