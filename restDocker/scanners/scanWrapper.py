from scanners.modelWrapper import ModelWrapper
from scanners.clamAvWrapper import ClamAvWrapper
from scanners.scanner import Scanner
from flask import Blueprint

"""
    Haven't decided if this should have a tracker for things
    such has total amount of requests. Maybe as things expand.
"""
class ScanWrapper(Scanner):
    def __new__(cls):
        if not hasattr(cls, 'instance'):
            cls.instance = super(ScanWrapper, cls).__new__(cls)
        return cls.instance

    def __init__(self) -> None:
        self._inhouseModel = ModelWrapper()
        self._clamAvModel = ClamAvWrapper()
        
        self._bluePrint = Blueprint(
            self.__class__.__name__,
            self.__class__.__name__,
            template_folder="templates")
        
        self._bluePrint.register_blueprint(self._inhouseModel.getBluePrint())
        self._bluePrint.register_blueprint(self._clamAvModel.getBluePrint())

    def avaliable(self) -> bool:
        return True

    def scan(self, data, metadata) -> dict:
        scannerResults = {}

        if self._info == None:
            raise RuntimeError("Have to initialize with the 'avaliable' member function")
        
        if self._inhouseModel.avaliable():
            pred = self._inhouseModel.scan(data, metadata)
            if pred['results'] == 'clean':
                return pred

        if self._clamAvModel.avaliable():
            pred = self._clamAvModel.scan(data, metadata)
            scannerResults = pred
        
        return scannerResults
    
    def getBluePrint(self):
        return self._bluePrint