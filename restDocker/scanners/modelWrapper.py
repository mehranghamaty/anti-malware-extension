import pefile
import joblib
import pandas as pd
from flask import render_template, Blueprint
from utility.cache import ResultTracker
from scanners.scanner import Scanner

MODEL_PATH = 'ml.model'
LABELS = ["Good", "Adware", "Trojan", "Trojan", "Installer", "Backdoor", 
          "Crypto", "Backdoor", "Downloader", "Heuristic"]

# Configuration constants
CAN_SCAN = {'exe', 'dll', 'sys', 'drv', 'ocx', 'cpl', 'scr'}

def toDF(bytearray):
    return pd.DataFrame.from_dict({'pixel{}'.format(i+1) : [b] for i, b in enumerate(bytearray)})

class ModelWrapper(Scanner):
    def __new__(cls,):
        if not hasattr(cls, 'instance'):
            cls.instance = super(ModelWrapper, cls).__new__(cls)
        return cls.instance
    
    def __init__(self) -> None:
        self._model = joblib.load(MODEL_PATH)
    def __new__(cls,):
        if not hasattr(cls, 'instance'):
            cls.instance = super(ModelWrapper, cls).__new__(cls)
        return cls.instance
    
    def __init__(self) -> None:
        self._model = joblib.load(MODEL_PATH)
        self._resultsTracker = ResultTracker(f"{self.__class__.__name__}.txt")
        self._bluePrint = Blueprint(
            self.__class__.__name__,
            self.__class__.__name__,
            template_folder="templates")
        self._bluePrint.add_url_rule('/dashboard', 'dashboard', self.dashboard, methods = ['GET'])

    def avaliable(self) -> bool:
        return True

    def scan(self, data, metadata) -> dict:

        scanner_results = {}
        if metadata.fileExe not in CAN_SCAN:
            scanner_results["results"] = "no_scan"
            scanner_results["method"] = "inhouse"
            return scanner_results

        pe = pefile.PE(data=data)
        input = toDF(pe.header)
        pred = int(self._model.predict(input)[0])
        self._resultsTracker.incr(pred);


        if pred == 0:
            scanner_results["results"] = "clean"
            scanner_results["method"] = "inhouse"
        else:
            scanner_results["results"] = "possibly_malicious"
            scanner_results["method"] = "inhouse"
            scanner_results["reason"] = LABELS[pred]
        return scanner_results
    
    def getBluePrint(self):
        return self._bluePrint
    
    def dashboard(self):
        return render_template('dashboard.html', 
                               name=self.__class__.__name__, 
                               responses=self._resultsTracker.getResults())
