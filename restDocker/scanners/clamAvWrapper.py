if __name__ != "__main__":
    from utility.cache import ResultTracker
    from scanners.scanner import Scanner
else:
    from scanner import Scanner
    from ..utility.cache import ResultTracker


import pyclamd
from io import BytesIO
from flask import render_template, Blueprint

class ClamAvWrapper(Scanner):
    def __new__(cls):
        if not hasattr(cls, 'instance'):
            cls.instance = super(ClamAvWrapper, cls).__new__(cls)
        return cls.instance
    
    def __init__(self) -> None:
        self._clam = pyclamd.ClamdUnixSocket()
        self._avaliable = self._clam.ping() == 'PONG'
        self._resultsTracker = ResultTracker(f"{self.__class__.__name__}.txt")
        self._bluePrint = Blueprint(
            self.__class__.__name__,
            self.__class__.__name__,
            template_folder="templates")
        self._bluePrint.add_url_rule('/dashboard', 'dashboard', self.dashboard, methods = ['GET'])

    def avaliable(self) -> bool:
        return self._avaliable

    def scan(self, data) -> int:
        pred = self._clam.instream(BytesIO(data))

        #{'stream': ('OK', None)} plain text files
        #{'stream': ('FOUND', 'Win.Test.EICAR_HDB-1')} clamd.EICAR
        return pred
    
    def getBluePrint(self):
        return self._bluePrint
    
    def dashboard(self):
        return render_template('dashboard.html', 
                               name=self.__class__.__name__, 
                               responses=self._resultsTracker.getResults())
    


if __name__ == "__main__":
    from flask import Flask, request

    clam = ClamAvWrapper()
    app = Flask(__name__)
    app.register_blueprint(clam.getBluePrint())

    with app.test_client() as client:
        client.get('/dashboard')
        print(request.path)