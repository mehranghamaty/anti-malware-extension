from utility.config import TARGET_URL, test_config
#import threading
import flask_unittest

from app.app import generateApp
#import requests
#import unittest
import os

CHUNK_SIZE = 4194304


"""
    End points to test for

    0. ensure keep alive works
    1. ensure scanning works
    2. ensure dashboard works
"""

class TestResponses(flask_unittest.AppClientTestCase):
    def create_app(self):
        return generateApp()

    """
        Basic keep alive
    """
    def testAlive(self, _, client):
        response = client.get('/')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.text, 'works!')

    
    """
        Make sure we are getting a reasonable result from the scanner
    """
    def testScanner(self, _, client):
        test_file = "testFiles/GeForceNOW-release.exe"
        request_url = "/scan"
        num_bytes = os.stat(test_file).st_size
        with open(test_file, 'rb') as file:
            ind = 0
            while chunk := file.read(CHUNK_SIZE):
                new_ind = ind + CHUNK_SIZE
                lastMess = num_bytes <= new_ind
                body = {
                    'name': test_file,
                    'data': [b for b in chunk],
                    'start': ind,
                    'end': num_bytes if lastMess else new_ind,
                    'lastMessage': lastMess,
                }
                response = client.post(request_url, json = body)
                ind = new_ind

                #print(f"sending {new_ind} out of {num_bytes}, {new_ind/num_bytes}")
                #print(num_bytes, new_ind)
                #print(response)
                self.assertEqual(response.status_code, 200)
                self.assertEqual(response.headers['content-type'], 'application/json')
                if not lastMess:
                    self.assertEqual(response.json, {"status":"parsing"})
                else:
                    scanner_res =  { "results" : "possibly_malicious", "method" : "inhouse", "reason" : "Trojan"}
                    self.assertEqual(response.json, 
                                    {
                                        "scanner_results" : scanner_res,
                                        "status": "complete"
                                    })


if __name__ == "__main__":
    
    TestResponses.main()