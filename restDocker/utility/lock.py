from multiprocessing import Lock
from functools import wraps

"""
    Quick and dirty solution 

    for the cache I should have a lock per key
"""
def LockDecorator(lock: Lock):
    def LockDecorator(func):
        def wrapper(*args, **kwargs):
            lock.acquire()
            try:
                res = func(*args, **kwargs)
                return res
            finally:
                lock.release()
                
            
        return wrapper
    return LockDecorator

"""
    Since we would like a lock per instance of the 
    tracker.

    WARNING assums that the class has a self.lock_ field

    could probably check to see if it doesn't exist if so add 
    the lock. TODO
"""
def ClassLock(method):
    @wraps(method)
    def _lockWrapper(self, *args, **kwargs):
        self.lock_.acquire()
        try:
            res = method(self, *args, **kwargs)
            return res
        finally:
            self.lock_.release()
    return _lockWrapper