from flask import Flask, request, render_template, jsonify
from flask_cors import CORS
import os
from dotenv import load_dotenv
from cache import Cache, ResultTracker
from helpers import scannable
from modelWrapper import ModelWrapper
import atexit

load_dotenv()

resultsTracker = ResultTracker()
cache = Cache()
model = ModelWrapper('ml.model')

flask_config = {
    'host' : os.environ.get('FLASK_HOST', '0.0.0.0'),
    'port' : int(os.environ.get('FLASK_PORT', 8000)),
    'debug' : os.environ.get('FLASK_DEBUG', 'True')
}

app = Flask(__name__)
CORS(app)

# Routes
@app.route('/')
def test():
    print(request.json)
    return "works!"

#https://ttl255.com/jinja2-tutorial-part-2-loops-and-conditionals/
@app.route('/dashboard', methods = ['GET'])
def dashboard():
    return render_template('dashboard.html', responses=resultsTracker.getResults())

"""
So probably shouldn't be using redis because
its slow enough as it is. wouldn't mind having a static array to 
hold the file
"""
@app.route('/scan', methods = ['POST'])
def scan():
    #print(request.json)
    name = request.json['name']
    if not scannable(name): #, can_scan):
        resp = jsonify({'message' : 'not supported file type'})
        resp.status_code = 400
        return resp
    resp = {'status' : 'parsing'}


    startInd = request.json['start']

    """
        Technically I have to download the entire
        file then check hashes to make sure...
    """
    if cache.getColdCopyPath(name) == None:
        if cache.exists(name) and startInd == 0:
            del cache[name]
        
        data = bytearray(request.json['data']['data'])
        cache.extend(name, data)
        finished = request.json['lastMessage']
    else:
        finished = True
    
    if finished:
        filename = cache.writeToFile(name)
        pred = model.predict(filename)
        print(pred)
        if pred != 0:
            resp['status'] = 'hostReject'
            resultsTracker.incr(pred)

    resp = jsonify(resp)
    resp.status_code = 201
    return resp

if __name__ == "__main__":
    def clean_up():
        del resultsTracker
    atexit.register(clean_up)
    app.run(**flask_config)