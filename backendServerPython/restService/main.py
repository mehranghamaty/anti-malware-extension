from flask import Flask, request, render_template, jsonify
from flask_cors import CORS
import json
import os
import joblib
from dotenv import load_dotenv
import redis
import pandas as pd
import uuid
import pefile

load_dotenv()

# Configuration constants
can_scan = {'exe'}

redis_connection = redis.Redis(
    host='0.0.0.0',
    port='6379'
)

mapping = {
    -1 : "NoScan",
    0 : "Good",
    1 : "Adware",
    2 : "Trojan",
    3 : "Trojan",
    4 : "Installer",
    5 : "Backdoor",
    6 : "Crypto",
    7 : "Backdoor",
    8 : "Downloader",
    9 : "Heuristic",
}

model = joblib.load('ml.model')

flask_config = {
    'host' : os.environ.get('FLASK_HOST', '0.0.0.0'),
    'port' : int(os.environ.get('FLASK_PORT', 8000)),
    'debug' : os.environ.get('FLASK_DEBUG', 'True')
}

print(flask_config)

app = Flask(__name__)
CORS(app)

# Helper Functions
def toArray(uintArray):
    res = []
    for k, v in uintArray.items():
        res.append(v)
    return res

def getResults():
    results = []
    for key, value in mapping.items():
        count = redis_connection.get(key)
        if count is None:
            count = 0
        else:
            count = int(count)
        results.append({'name': value,
                        'count': count})
    return results 

def getExtension(uri):
    return uri[uri.rfind(".")+1:]

def scannable(uri, willscan):
    return getExtension(uri) in willscan

# Routes
@app.route('/')
def test():
    print(request.json)
    return "works!"

#https://ttl255.com/jinja2-tutorial-part-2-loops-and-conditionals/
@app.route('/dashboard', methods = ['GET'])
def dashboard():
    return render_template('dashboard.html', responses=getResults())

@app.route('/scan', methods = ['POST'])
def scan():
    #print(request.json)
    name = request.json['name']
    if not scannable(name, can_scan):
        resp = jsonify({'message' : 'not supported file type'})
        resp.status_code = 400
        return resp

    startInd = request.json['start']
    if redis_connection.exists(name) and startInd == 0:
        redis_connection.delete(name)
    redis_connection.append(name, request.json['data'])
    
    resp = {'status' : 'parsing'}

    finished = request.json['lastMessage']
    if finished:
        data = redis_connection.get(name)
        encoded_bytearray = bytearray(data.encode('utf-8'))
        print(encoded_bytearray)
        with open('{}.txt'.format(getExtension(name)), 'ab') as f:
            f.write(encoded_bytearray)
        input = {'pixel{}'.format(i+1) : [b] for i, b in enumerate(encoded_bytearray)}
        print(input)
        pf = pd.DataFrame(input)
        pred = int(model.predict(pf)[0])
        print(pred)
        if pred != 0:
            resp['status'] = 'hostReject'
            redis_connection.incr(pred)

    resp = jsonify(resp)
    resp.status_code = 201
    return resp

if __name__ == "__main__":
    app.run(**flask_config)