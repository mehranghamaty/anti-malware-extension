import { config } from '../UtilityFiles/config';
import { SEALWrapper } from './fHE';
import { Buffer } from 'buffer';
import mime from 'mime-types';

let fHE = new SEALWrapper();

/**
 * WARNING THIS WON'T WORK FOR HUGE FILES.
 * @param {File} file
 * @param {boolean=} encrypt
 * @return {json}
 */
async function requestScanFile(file, encrypt=false) {
    //only have to send first 1024 bits
    const data = (new Uint8Array(await file.arrayBuffer())).subarray(0,1024); //slice().
    let messageBody = "";
    if(encrypt) {
        messageBody = (await fHE.encrypt(data)).save();
    } else {
        messageBody = Buffer.from(data).toString();
    }
    const response = await fetch(config.hosturi + '/scan', {
        method: 'POST',
        body: JSON.stringify({ name: file.name, data: messageBody }, 
                (key, value) =>
                typeof value === 'bigint'
                    ? value.toString()
                    : value 
            ),
        headers: {
            'Content-Type': 'application/json'
        }
    });
    const resObj = await response.json();
    if(encrypt) {
        console.log(await fHE.decrypt(resObj.data));
    } else {
        console.log(resObj);
    }
    return resObj;
}

/**
 * 
 * @param {string} uri 
 */
async function getAsFile(uri) {
    const res = await fetch(uri);
    const blob = await res.blob();
    const metadata = {
        type : mime.lookup(uri),
    };
    return new File([blob], uri, metadata);
}

export {requestScanFile, getAsFile};