import { config } from '../UtilityFiles/config';
//import { SEALWrapper } from './fHE';
import { Buffer } from 'buffer';
import mime from 'mime-types';

//let fHE = new SEALWrapper();
const uri = config.debug ? config.debughosturi : config.hosturi;
const json_headers =  {
    'Content-Type': 'application/json'
};
const CHUNK_SIZE = 4194304;

/**
 * @param {File} file
 * @return {json}
 */
async function requestScanFile(file, encrypt=false) {
    const data = (new Uint8Array(await file.arrayBuffer()))
    let ind = 0;
    while(ind < data.length) {
        const next_ind = Math.min(ind + CHUNK_SIZE, data.length);
        const messageBody = Buffer.from(data.subarray(ind, next_ind))// .toString('utf8')//.join("");//Buffer.from(data).toString();
        let body = { 
            name: file.name, 
            data: messageBody, 
            start: ind, 
            end: next_ind,
            lastMessage: next_ind >= data.length 
        }
        if(config.debug)
            console.log("sending ", file.name, ind, next_ind)
        try {
            const response = await fetch(uri + '/scan', {
                method: 'POST',
                body: JSON.stringify(body),
                headers: json_headers
            });
            if(!response.ok) {
                throw new Error('bad response', {
                    cause: {
                        response,
                    }
                })
            }
            ind = next_ind;
            const resObj = await response.json();
            if(config.debug)
                console.log(resObj);
            if(resObj['status'] != 'parsing')
                return resObj;
        } catch (err) {
            
            if(config.debug)
                console.error(err);
            return {'status' : "hostNoScan"};
        }
    }
    return {'status' : "hostReject"};
}

/**
 * 
 * @param {string} uri 
 */
async function getAsFile(uri) {
    const res = await fetch(uri);
    const blob = await res.blob();
    const metadata = {
        type : mime.lookup(uri),
    };
    return new File([blob], uri, metadata);
}

export {requestScanFile, getAsFile};