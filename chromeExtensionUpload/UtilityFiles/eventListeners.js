import { CardHolder } from "../UIElements/cardHolder";

/**
 * @param {CardHolder} cardHolder 
 * @returns 
 */
function dropHandler(cardHolder) {
    return (ev) => {
        console.log("File(s) dropped");
    
        // Prevent default behavior (Prevent file from being opened)
        ev.preventDefault();
    
        if (ev.dataTransfer.items) {
            // Use DataTransferItemList interface to access the file(s)
            [...ev.dataTransfer.items].forEach(async (item, i) => {
                // If dropped items aren't files, reject them
                if (item.kind === "file") {
                    const file = item.getAsFile();
                    await cardHolder.addCard(file);
                    console.log(`… file[${i}].name = ${file.name}`);
                }
            });
        } else {
            // Use DataTransfer interface to access the file(s)
            [...ev.dataTransfer.files].forEach(async (file, i) => {
                await cardHolder.addCard(file);
                console.log(`… file[${i}].name = ${file.name}`);
            });
        }
    }
}

/**
 * @param {CardHolder} cardHolder 
 * @returns 
 */
function findAndDisplayLinks(cardHolder) {
    function getLinks() {
        const FileTypes = new Set(['exe', 'dmg', 'pdf', 'png']);

        /**
         * @param {string} uri 
         * @return {string | null}
         */
        function getExtension(uri) {
            const lastSlash = Math.max(uri.lastIndexOf('/'), 0)+1;
            const uriShortended = uri.substring(lastSlash)
            const lastPeriod = lastSlash + uriShortended.lastIndexOf('.')+1;
            if(lastPeriod === -1)
                return null;
            const ext = uri.substring(lastPeriod);
            if(ext === '')
                return null;
            return ext;
        }

        /**
         * @param {HTMLAnchorElement | HTMLAreaElement} anchor 
         * @return {boolean}
         */
        function shouldInspect(link) {
            const ext = getExtension(link.href);
            if(ext) {
                return FileTypes.has(ext.trim());
            }
            return false;
        }

        var links = []
        for(const link of document.links) {
            if(shouldInspect(link)) {
                links.push(link.href);
            }
        }
        return JSON.stringify(links);
    }

    function runOnTab(tab) {
        return chrome.scripting.executeScript({
            target: {tabId: tab.id, allFrames: true}, 
            func : getLinks,
        }).then((injectionResults) => {
            for (const {frameId, result} of injectionResults) {
                const linksOfInterest = JSON.parse(result);
                if(linksOfInterest.length == 0) {
                    continue;
                }
                console.log(`Frame ${frameId} result:`, result);
            }
        });
    }

    function toRunOnTabs(tabs) {
        for(let i = 0; i < tabs.length; ++i) {
            runOnTab(tabs[i]);
        }
    }

    function injectScript() {
        const queryOptions = { active: true, currentWindow: true };
        chrome.tabs.query(queryOptions, toRunOnTabs);
    }

    return (ev) => {
        console.log('pressed the upload button');
        injectScript();
    }
}

/**
 * @param {Event} ev 
 */
function dragOverHandler(ev) {
        console.log("File(s) in drop zone");
        ev.preventDefault();
}

export {dropHandler, dragOverHandler, findAndDisplayLinks};