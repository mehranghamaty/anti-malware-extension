/**
 * https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements
 * update this to extend the HTMLButtonElement
 * @class DropArea
 */
export default class DropArea extends HTMLElement {
    static get observedAttributes() { return ['holder']; }

    attributeChangedCallback(name, oldValue, newValue) {
        if(name == 'holder') {
            this._holder = document.getElementById(this.getAttribute(newValue));
        }
    }

    constructor(holder_id=undefined) {
        super();
        this.innerHTML = "⭱";

        this._holder = undefined;
        
        
        if(this.hasAttribute("holder")) {
            this._holder = document.getElementById(this.getAttribute("holder"));
        } else if(holder_id !== undefined) {
            this._holder = document.getElementById(holder_id);

        }

        this.onclick = () => {
            console.log("hello");
        };

        let self = this;

        
        this.onclick = () => {console.log("hello world");};
        
        this.ondragenter = (e) => {
            e.preventDefault();
            e.stopPropagation();
            self._entered()
        };
        this.ondragleave = (e) => {
            e.preventDefault();
            e.stopPropagation();
            self._exited();
        };
        this.ondragover = (e) => {
            //console.log("File(s) in drop zone");
            e.preventDefault();
            e.dataTransfer.effectAllowed = 'move';

        };
        this.ondrop = (e) =>  {
            console.log("dropped!");
            e.preventDefault();
            e.stopPropagation();
            self._exited();
            if(self._holder) {
                console.log("in holder");
                if (e.dataTransfer.items) {
                    [...e.dataTransfer.items].forEach(async (item, i) => {
                        if (item.kind === "file") {
                            const file = item.getAsFile();
                            self._processFile(file);
                            //console.log(`… file[${i}].name = ${file.name}`);
                        }
                    });
                } else {
                    [...e.dataTransfer.files].forEach(async (file, i) => {
                        self._processFile(file);
                        //console.log(`… file[${i}].name = ${file.name}`);
                    });
                }
            }
        };
    }

    _entered() {
        this.classList.add("entered");
        this.innerHTML = "⭳";

    }

    _exited() {
        this.classList.remove("entered");
        this.innerHTML = "⭱";
    }

    /**
     * 
     * @param {File} file 
     */
    _processFile(file) {
        this._holder.addCardFromFile(file);
    }
}
customElements.define("drop-area", DropArea);