import AncilliaryButton from '@UIElements/ancilliarybutton.mjs';
import InfoTag from '@UIElements/infotag.mjs';
import { inspectFile } from '@FileInspector/fileInspect.js';

/**
 * Tag populates the inner items itself.
 * <card-item>
 *  <p uri>http://Downloadpath...</p>
 *  <div status></div>
 *  <ancilliary-button></ancilliary-button>
 *  <info-tag></info-tag>
 * </card-item>
 * @class CardItem
 */
export default class CardItem extends HTMLElement {
    constructor() {
        super();

        this._uri = document.createElement("p");
        this._uri.setAttribute("uri", "");

        this._status = document.createElement("div");
        this._status.setAttribute("status", "");

        this._ancilliarybutton = new AncilliaryButton();
        this._infotag = new InfoTag();

        this.appendChild(this._uri);
        this.appendChild(this._status);
        this.appendChild(this._ancilliarybutton);
        this.appendChild(this._infotag);

        if(this.classList.length != 0) {
            this._infotag.classList.add(this.classList);
        }

        if(this.classList.contains("safe")) {
            this.setSafe();
        } else if(this.classList.contains("warning")) {
            this.setWarning();
        } else if(this.classList.contains("malicious")) {
            this._status.innerHTML = "Reported as possibly malicious";
            this.setMalicious();
        } else {
            this._progressbar = document.createElement("progress");
            this._progressbar.setAttribute("max", "100");
            this._progressbar.setAttribute("value", "0");
            this._status.appendChild(this._progressbar);
        }
    }

    /**
     * @param {File} file
     */
    setFile(file) {
        this._uri.textContent = file.name;
        let res = inspectFile(file, this.setProgressBar(this._progressbar));
        res
            .then((final_results) => {
                console.log("Promise resolved successfully");
                let scanner_res = final_results.scanner_results;
                console.log(scanner_res);
                switch(scanner_res.results) {
                    case 'clean':
                        this.setSafe(scanner_res.reason);
                        break;
                    default:
                    case 'no_scan':
                        this.setWarning(scanner_res.reason);
                        break;
                    case 'possibly_malicious':
                        this.setMalicious(scanner_res.reaon);
                        break;
                }
            })
            .catch((err) => {
                console.error("An issue happened inspecting the file", err);
            });
    }

    /**
     * @param {HTMLProgressElement} progressbar
     */
    setProgressBar(progressbar) {
        /**
         * @param {Number} val 
         * @param {Number} high
         */
        return (val, high) => {
            progressbar.setAttribute("max", high);
            progressbar.setAttribute("value", val);
        };
    }

    /**
     * @param {string} explanation 
     */
    setTip(explanation) {
        this._infotag.setHint(explanation);
    }

    /**
     * 
     * @param {string} reason 
     */
    setSafe(reason) {
        this._infotag.classList.remove("warning", "malicious");
        this._infotag.classList.add("safe");
        this.classList.remove("warning", "malicious");
        this.classList.add("safe");
        this.setTip("File is considered safe.");
        this._status.innerHTML = "Looks safe to download!";
        this._ancilliarybutton.setDownload("here?");
    }

    /**
     * 
     * @param {string} reason 
     */
    setWarning(reason) {
        this._infotag.classList.remove("safe", "malicious");
        this._infotag.classList.add("warning");
        this.classList.remove("safe", "malicious");
        this.classList.add("warning");
        this._status.innerHTML = reason;
        this.setTip("Something went wrong.");
        let callback = () => {console.log("hello world");};
        this._ancilliarybutton.setRetry(callback);
    }


    /**
     * 
     * @param {string} reason 
     */
    setMalicious(reason) {
        this._infotag.classList.remove("safe", "warning");
        this._infotag.classList.add("malicious");
        this.classList.remove("safe", "warning");
        this.classList.add("malicious");
        this.setTip(reason);
        this._status.innerHTML = "Possibly malicious";
        this._ancilliarybutton.setNoDownload("theres no file!");
    }


}

customElements.define("card-item", CardItem);