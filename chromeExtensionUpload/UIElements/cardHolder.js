import { getAsFile } from "../FileInspector/restClient";
import { Card } from "./card";

/**
 * @class CardHolder
 */
class CardHolder {
    /**
     * @param {HTMLElement} cardHolder where the elements are going to be
     *   inserted into
     * @param {HTMLElement} cardTemplate the template for cards
     */
    constructor(cardHolder, cardTemplate) {
        /** @type {HTMLElement} */
        this.cardHolder_ = cardHolder;

        /** @type {HTMLElement} */
        this.cardTemplate_ = cardTemplate;

        /** @type {Array<Card>} */
        this.cards_ = [];
    }

    /**
     * @param {File} file 
     */
    async addCardFromFile(file) {
        let card = new Card(this.cardTemplate_);
        card.setFromFile(file);
        this.cardHolder_.appendChild(card.render());
        this.cards_.push(card);
        await card.scanFile();
    }

    /**
     * @param {string} uri
     */
    async addCardFromUri(uri) {
        let card = new Card(this.cardTemplate_);
        this.cardHolder_.appendChild(card.render());

        let file = await getAsFile(uri);
        card.setFromFile(file);
        await card.scanFile();
    }

    /**
     * Shouldn't use this...
     */
    async scanCards() {
        await Promise.all(this.cards_.map(card => card.scanFile()));
    }
}

export { CardHolder };