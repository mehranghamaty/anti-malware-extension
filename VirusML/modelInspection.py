import joblib
import sys
import time
from helpers import getDataset
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt
import os

if len(sys.argv) < 2:
    print("Usage: {} [path_to_model] [path_to_optional_second_model] [...]".format(sys.argv[0]))
    exit(1)

modelsPath = sys.argv[1:]
labels = ["Good", "Adware", "Trojan", "Trojan", "Installer", "Backdoor", "Crypto", "Backdoor", "Downloader", "Heuristic"]
datasetpath = './archive/'
(trainX, trainY, testX, testY) = getDataset(datasetpath)
testYBinary = testY.copy()
testYBinary[testYBinary!=0] = 1


ticklabels = ['benign', 'malicious']

def getfilename(filepath: str) -> str:
    if os.name == 'nt':
        filename = filepath[filepath.rfind('\\')+1:]    
    else:                  
        filename = filepath[filepath.rfind('/')+1:]
    return filename

def getPlotsFolder(filename: str) -> str:
    if os.name == 'nt':
        path = f"Figures\\{filename}.png"      
    else:          
        path = f"Figures/{filename}.png"
    return path


for modelpath in modelsPath:
    plt.clf()
    fig, axs = plt.subplots(1, 2)
    #fig.tight_layout(pad=2.0)
    print(axs)
    for i, modelPath in enumerate([modelpath]):
        singleModel = True# len(modelsPath) == 1

        model = joblib.load(modelPath)
        start = time.time()
        hatY = model.predict(testX) 
        end = time.time()
        timeToPredict = end-start
        cm = confusion_matrix(testY, hatY)
        disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=labels)
        ax1 = axs[0] if singleModel else axs[i,0]
        disp.plot(ax=ax1)
        filename = getfilename(modelPath)
        ax1.set_title(f"Confusion matrix from {filename}")
        ax1.set_xticklabels(ax1.get_xticklabels(), rotation=45, ha='right')


        hatY[hatY!=0] = 1
        cm = confusion_matrix(testYBinary, hatY)
        disp = ConfusionMatrixDisplay(confusion_matrix=cm)
        ax2 = axs[1] if singleModel else axs[i,1]
        disp.plot(ax=ax2)
        ax2.set_yticklabels(ticklabels)
        ax2.set_xticklabels(ticklabels)

        accuracy = 1-(sum(testYBinary != hatY)/ len(hatY))
        falsePositive = cm[0,1] / len(hatY)
        falseNegative = cm[1,0] / len(hatY)
        
        descr = """
            Prediction took {:.2f}s - Accuracy: {:.2f}
            False positive rate: {:.2f} - False negative rate: {:.2f}
        """.format(timeToPredict, accuracy, falsePositive, falseNegative)
        ax2.set_title(descr)
        #ax3 = axs[2] if singleModel else axs[i,2]

        #ax3.text(0,0, descr)

    fig.set_figheight(10)
    fig.set_figwidth(20)
    #plt.show()

    """
    Should have the file save the figure and not show it,
    but I digress
    """
    filename = getfilename(modelpath)
    print(filename)
    plt.savefig(getPlotsFolder(filename))
