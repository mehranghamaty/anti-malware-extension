import requests
import lxml
from bs4 import BeautifulSoup
import os
import signal




headers = {
  'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36 QIHU 360SE'
}

download_folder = '../foss/'
if not os.path.exists(download_folder):
    os.makedirs(download_folder)

categories= []
url = "https://www.fosshub.com"

f = requests.get(url, headers=headers)
soup = BeautifulSoup(f.content, 'lxml')
categories = soup.find_all('a', {
    'class': 'l-cta'
  })

from selenium import webdriver
from selenium.webdriver.common.by import By
#from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
import time
import random

class SeenBefore():
    def __new__(cls):
        if not hasattr(cls, 'instance'):
            cls.instance = super(SeenBefore, cls).__new__(cls)
        return cls.instance
    
    def __init__(self, path='../seen.txt'):
        self._path = path
        self._haveSeen = set()
        if os.path.exists(self._path):
            with open(self._path, 'r') as f:
                for line in f.readlines():
                    print(f"adding {line} as already seen")
                    self._haveSeen.add(line.strip())

    def add(self, url):
        if url not in self._haveSeen:
            self._haveSeen.add(url)

            with open(self._path, 'a') as f:
                f.write(f"{url}\n")

    def has(self, url):
        return url in self._haveSeen


class SeleniumDriver():
    _appXPath = "//*[@itemprop=\"downloadUrl\"]"
    _seenBefore = SeenBefore()
    def __init__(self, downloadTo):
        #options = webdriver.ChromeOptions()#Options()
        #prefs = {
        #    #"download.default_directory" : downloadTo,
        #    "download.prompt_for_download" : False,
        #    "profile.default_content_setting_values.automatic_downloads": True
        #}
        #options.add_experimental_option("prefs",prefs)
        #service = Service(ChromeDriverManager().install())
        #self._driver = webdriver.Chrome(service=service, 
        #                                options=options)
        
        #service = Service(executable_path="chromedriver.exe")
        #self._driver = webdriver.Chrome(service=service, options=options)
        #self._driver = webdriver.Chrome(executable_path='./driver/chromedriver.exe', options=options)
        profile = webdriver.FirefoxProfile()
        profile.set_preference("browser.helperApps.neverAsk.saveToDisk", "application/octet-stream")
        self._driver = webdriver.Firefox(firefox_profile=profile,
                                         service_log_path="..\\geckodriver.log")

    def getApps(self, url):
        if self._seenBefore.has(url):
            return
        if url[-3:] != "exe":
            return
        else:
            print(f"url ends in {url[-3:]} continuing")
        
        print(url)
        shurl = url[:url.rfind('?')]
        self._driver.get(shurl)
        time.sleep(random.random())
        apps = self._driver.find_elements(By.XPATH, self._appXPath)
        for app in apps:
            self._getItem(app)
        
        self._seenBefore.add(url)
    
    def _getItem(self, element, maxretry=5):
        if maxretry == 0:
            return
        try:
            element.click()
        except Exception as err:
            print(f"something happened {err}")
            time.sleep(random.random())
            return 
            #turns out its downloading it anyway
            self._getItem(element, maxretry-1)

    def close(self):
        self._driver.close()

mydriver = SeleniumDriver(download_folder)


"""
def handler(signum, frame):
    mydriver.close()
    exit(1)

signal.signal(signal.SIGINT, handler)
"""

for cat in categories:
    catlink = cat['href']
    category_url = f"{url}{catlink}"
    print(f"Checking {category_url}")
    f = requests.get(category_url, headers=headers)
    cat_soup = BeautifulSoup(f.content, 'lxml')

    app_links = cat_soup.find_all('a', {'class' : 'app__cta'})
    
    for app in app_links:
        app_url = f"{url}{app['href']}"
        f = requests.get(app_url, headers=headers)
        app_soup = BeautifulSoup(f.content, 'lxml')
        exes = app_soup.find_all('a', {'data-download': 'true'})
        for exe_link in exes:
            download_uri = exe_link['href']
            mydriver.getApps(download_uri)
            """
            f = requests.get(download_uri, headers=headers)
            app_name = download_uri[download_uri.rfind('=')+1:]
            with open(f"{download_folder}{app_name}", 'wb') as download_file:
                download_file.write(f.content)
            """


