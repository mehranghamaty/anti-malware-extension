import joblib
import sys
import time
from helpers import getDataset
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

if len(sys.argv) < 2:
    print("Usage: {} [path_to_model] [path_to_optional_second_model] [...]".format(sys.argv[0]))

modelsPath = sys.argv[1:]
labels = ["Good", "Adware", "Trojan", "Trojan", "Installer", "Backdoor", "Crypto", "Backdoor", "Downloader", "Heuristic"]
datasetpath = './archive/'
(trainX, trainY, testX, testY) = getDataset(datasetpath)
testYBinary = testY.copy()
testYBinary[testYBinary!=0] = 1


def getfilename(filepath: str) -> str:
    return filepath[filepath.rfind('/')+1:]

fig, axs = plt.subplots(len(modelsPath), 3)
print(axs)
for i, modelPath in enumerate(modelsPath):
    singleModel = len(modelsPath) == 1

    model = joblib.load(modelPath)
    start = time.time()
    hatY = model.predict(testX) 
    end = time.time()
    timeToPredict = end-start
    cm = confusion_matrix(testY, hatY)
    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=labels)
    ax1 = axs[0] if singleModel else axs[i,0]
    disp.plot(ax=ax1)
    ax1.set_title("Confusion matrix from {}".format(getfilename(modelPath)))

    hatY[hatY!=0] = 1
    cm = confusion_matrix(testYBinary, hatY)
    disp = ConfusionMatrixDisplay(confusion_matrix=cm)
    ax2 = axs[1] if singleModel else axs[i,1]
    disp.plot(ax=ax2)
    ax2.set_title("summarized")

    accuracy = 1-(sum(testYBinary != hatY)/ len(hatY))
    falsePositive = cm[0,1] / len(hatY)
    falseNegative = cm[1,0] / len(hatY)
    ax3 = axs[2] if singleModel else axs[i,2]
    descr = """
        Prediction took {:.2f}s
        Accuracy: {:.2f}
        False positive rate: {:.2f}
        False negative rate: {:.2f}
    """.format(timeToPredict, accuracy, falsePositive, falseNegative)

    ax3.text(0,0, descr)

fig.set_figheight(20)
fig.set_figwidth(20)
plt.show()
#plt.savefig('Figures/confusion.pdf')


"""
    We only care about false negatives and false positives
"""