import numpy as np
import pandas as pd
import joblib
import os

MODEL_FOLDER = 'models'

if not os.path.exists(MODEL_FOLDER):
     os.mkdir(MODEL_FOLDER)

def getDataset(path):
    # Save train.csv as a DataFrame and inspect
    train = pd.read_csv(path + '/train.csv')
    test = pd.read_csv(path + '/test.csv')
    #trainLabels = pd.read_csv(path + '/trainLabels.csv')
    trainX = train.drop(columns=['label', 'hash'])
    trainY = train[['label']].values.ravel()
    testX = test.drop(columns=['label', 'hash'])
    testY = test[['label']].values.ravel()
    return (trainX, trainY, testX, testY)

def accuracy(hatY, testY):
    return np.sum(hatY == testY) / len(testY)

def getAccuracy(classifier, testX, testY):
    hatY = classifier.predict(testX) 
    #testY = testY[['label']].values.T[0]
    return accuracy(hatY, testY)

def buildClassifier(constructor, config, trainX, trainY):
        print(constructor, **config)
        classifier = constructor(**config)
        classifier = classifier.fit(trainX, trainY)
        return classifier

def buildAndEvaluate(buildParams, trainX, trainY, testX, testY):
    accuracies = []
    for constructor, config in buildParams:
        classifier = buildClassifier(constructor, config, trainX, trainY)
        acc = getAccuracy(classifier, testX, testY)
        saveModel(constructor, classifier, acc)
        accuracies.append(acc)
    return accuracies

def saveModel(constructor, classifier, acc):
    className = str(constructor)
    # for older version of scikit learn
    #ind = className.find('\'')+1
    #className = className[ind:className.find('\'',ind)]
    className = className[className.rfind('.')+1:className.rfind('\'')]
    joblib.dump(classifier, open("{}/{}.{:.0f}.model".format(MODEL_FOLDER, className, acc*100), 'wb'))
        